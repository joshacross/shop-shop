{"version":3,"sources":["components/ProductItem/index.js","utils/helpers.js","utils/reducers.js","utils/actions.js","utils/GlobalState.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","utils/auth.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/OrderHistory.js","App.js","serviceWorker.js","index.js","assets/spinner.gif"],"names":["ProductItem","item","image","name","_id","price","quantity","className","to","alt","src","count","pluralize","reducer","state","action","type","products","categories","currentCategory","StoreContext","createContext","Provider","StoreProvider","value","initialState","props","useReducer","dispatch","useStoreContext","useContext","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","ProductList","useQuery","loading","data","useEffect","length","filter","product","category","map","key","spinner","CategoryMenu","categoryData","onClick","id","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","find","description","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","role","aria-label","LOGIN","ADD_USER","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","Login","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","a","preventDefault","variables","mutationResponse","Auth","console","log","handleChange","target","onSubmit","htmlFor","placeholder","onChange","Signup","addUser","firstName","lastName","Nav","loggedIn","href","logout","OrderHistory","user","orders","order","parseInt","purchaseDate","toLocaleDateString","index","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.fdb9fdc6.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\"\n\nfunction ProductItem(item) {\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        <span>${price}</span>\n      </div>\n      <button>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n","import { useReducer } from \"react\";\nimport {\n  UPDATE_PRODUCTS,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY\n} from \"./actions\";\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case UPDATE_PRODUCTS:\n      return {\n        ...state,\n        products: [...action.products],\n      };\n\n    case UPDATE_CATEGORIES:\n      return {\n        ...state,\n        categories: [...action.categories],\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      return {\n        ...state,\n        currentCategory: action.currentCategory\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport function useProductReducer(initialState) {\n  return useReducer(reducer, initialState)\n}\n\n// import { useReducer } from 'react';\n\n// export const reducer = (state, action) => {\n//     switch (action.type) {\n//       // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n//       case UPDATE_PRODUCTS:\n//         return {\n//           ...state,\n//           products: [...action.products]\n//         };\n//       // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n//       case UPDATE_CATEGORIES:\n//         return {\n//           ...state,\n//           categories: [...action.categories]\n//         };\n\n//         case UPDATE_CURRENT_CATEGORY:\n//             return {\n//                 ...state,\n//                 currentCategory: action.currentCategory\n//             };\n  \n//       default:\n//         return state;\n//     }\n//   };\n\n//   export function useProductReducer(initialState) {\n//     return useReducer(reducer, initialState);\n//   }","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\n\n","import React, { createContext, useContext } from \"react\";\nimport { useProductReducer } from './reducers'\n\nconst StoreContext = createContext();\nconst { Provider } = StoreContext;\n\nconst StoreProvider = ({ value = [], ...props }) => {\n  const [state, dispatch] = useProductReducer({\n    products: [],\n    categories: [],\n    currentCategory: '',\n  });\n\n  return <Provider value={[state, dispatch]} {...props} />;\n};\n\nconst useStoreContext = () => {\n  return useContext(StoreContext);\n};\n\nexport { StoreProvider, useStoreContext };\n\n// import React, { createContext, useContext } from 'react';\n// import { useProductReducer } from './reducers';\n\n// // empty container waiting for data to be provided to it as state\n// const StoreContext = createContext();\n// const { Provider } = StoreContext;\n\n// // instantiate initial global state with the useProductReducer function \n// // useProductReducer wraps around the useReducer hook from React \n// // allows us to receive state and dispatch\n// const StoreProvider = ({ value = [], ...props }) => {\n//     const [state, dispatch] = useProductReducer({\n//       products: [],\n//       categories: [],\n//       currentCategory: '',\n//     });\n//     // use this to confirm it works!\n//     console.log(state);\n//     return <Provider value={[state, dispatch]} {...props} />;\n//   };\n\n//   //notes: useProductReducer() completes and provides with new state and function to update state\n//   // return StoreContext's <Provider> component with our state obj and dispatch the function\n//   // provided as data for the value prop.\n\n//   //StoreProvider is our own custom Provider Component^^ \n\n//   const useStoreContext = () => {\n//     return useContext(StoreContext);\n//   };\n\n//   export { StoreProvider, useStoreContext };\n","import { gql } from '@apollo/client';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n","import React, { useEffect } from \"react\";\nimport { useQuery } from '@apollo/react-hooks';\n\nimport ProductItem from \"../ProductItem\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { UPDATE_PRODUCTS } from \"../../utils/actions\";\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\nimport spinner from \"../../assets/spinner.gif\"\n\nfunction ProductList() {\n  const [state, dispatch] = useStoreContext();\n\n  const { currentCategory } = state;\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  useEffect(() => {\n    if(data) {\n      dispatch({\n           type: UPDATE_PRODUCTS,\n          products: data.products\n        });\n    }\n  }, [data, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(product => product.category._id === currentCategory);\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n            {filterProducts().map(product => (\n                <ProductItem\n                  key= {product._id}\n                  _id={product._id}\n                  image={product.image}\n                  name={product.name}\n                  price={product.price}\n                  quantity={product.quantity}\n                />\n            ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      { loading ? \n      <img src={spinner} alt=\"loading\" />: null}\n    </div>\n  );\n}\n\nexport default ProductList;\n\n\n// import React, { useEffect } from 'react';\n// import { useQuery } from '@apollo/client';\n// import ProductItem from '../ProductItem';\n// import { QUERY_PRODUCTS } from '../../utils/queries';\n// import spinner from '../../assets/spinner.gif';\n// import { useStoreContext } from '../../utils/GlobalState';\n// import { UPDATE_PRODUCTS } from '../../utils/actions';\n\n// function ProductList() {\n//   const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n//   const products = data?.products || [];\n\n//   function filterProducts() {\n//     if (!currentCategory) {\n//       return products;\n//     }\n\n//     return products.filter(\n//       (product) => product.category._id === currentCategory\n//     );\n//   }\n\n// // retrieve current global state object and the dispatch method to update state \n// const [state, dispatch] = useStoreContext();\n\n// // destructure currentCategory data out of the state object to use in the filterProducts() function\n// const { currentCategory } = state;\n\n// const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n// // implement useEffect hook in order to wait for our useQuery() response to come in\n// useEffect(() => {\n//   // once data object returned, execute dispatch function to instruct reducer func that it's the UPDATE_PRODUCTS action\n//   // and should save the array of proudcts data to our global store.\n//   if (data) {\n//     dispatch({\n//       type: UPDATE_PRODUCTS,\n//       products: data.products\n//     });\n//   }\n// }, [data, dispatch]);\n\n// function filterProducts() {\n//   if (!currentCategory) {\n//     return state.products;\n//   }\n\n//   return state.products.filter(product => product.category._id === currentCategory);\n// }\n\n//   return (\n//     <div className=\"my-2\">\n//       <h2>Our Products:</h2>\n//       {products.length ? (\n//         <div className=\"flex-row\">\n//           {filterProducts().map((product) => (\n//             <ProductItem\n//               key={product._id}\n//               _id={product._id}\n//               image={product.image}\n//               name={product.name}\n//               price={product.price}\n//               quantity={product.quantity}\n//             />\n//           ))}\n//         </div>\n//       ) : (\n//         <h3>You haven't added any products yet!</h3>\n//       )}\n//       {loading ? <img src={spinner} alt=\"loading\" /> : null}\n//     </div>\n//   );\n// }\n\n// export default ProductList;\n","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\n\nfunction CategoryMenu() {\n  const [state, dispatch] = useStoreContext();\n\n  const { categories } = state;\n\n  const { data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n    }\n  }, [categoryData, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map(item => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n\n\n// import React, { useEffect } from 'react';\n// import { useQuery } from '@apollo/client';\n// import { QUERY_CATEGORIES } from '../../utils/queries';\n// import { useStoreContext } from \"../../utils/GlobalState\";\n// import { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\n\n// function CategoryMenu() {\n//   const { data: categoryData } = useQuery(QUERY_CATEGORIES);\n//   const categories = categoryData?.categories || [];\n\n//   //retrieve current state from global state object\n//   // use dispact method to update state\n//   const [state, dispatch] = useStoreContext();\n\n//   // destructure categories out of state\n//   const { categories } = state;\n//   // take categoryData that returns from the userQuery() hook and use dispatch method to set global state\n//   const { data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n//   const { data: categoryData } = useQuery(QUERY_CATEGORIES);\n  \n//   // when component loads and response from useQuery, useEffect notices that categoryData is not undefined and runs dispatch function, setting category data to the global state\n//   useEffect(() => {\n//     // if categoryData exists or has changed from the response of useQuery, then run dispatch()\n//     if (categoryData) {\n//       // execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\n//       dispatch({\n//         type: UPDATE_CATEGORIES,\n//         categories: categoryData.categories\n//       });\n//     }\n//   }, [categoryData, dispatch]);\n\n//   const handleClick = id => {\n//     dispatch({\n//       type: UPDATE_CURRENT_CATEGORY,\n//       currentCategory: id\n//     });\n//   };\n\n//   return (\n//     <div>\n//       <h2>Choose a Category:</h2>\n//       {categories.map(item => (\n//         <button\n//           key={item._id}\n//           onClick={() => {\n//             handleClick(item._id);\n//           }}\n//         >\n//           {item.name}\n//         </button>\n//       ))}\n//     </div>\n//   );\n// }\n\n// export default CategoryMenu;\n","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n    </div>\n  );\n};\n\nexport default Home;","import React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useQuery } from '@apollo/react-hooks';\n\nimport { useStoreContext } from \"../utils/GlobalState\";\nimport { UPDATE_PRODUCTS } from \"../utils/actions\";\nimport { QUERY_PRODUCTS } from \"../utils/queries\";\nimport spinner from '../assets/spinner.gif'\n\nfunction Detail() {\n  const [state, dispatch] = useStoreContext();\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({})\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const { products } = state;\n\n  useEffect(() => {\n    if (products.length) {\n      setCurrentProduct(products.find(product => product._id === id));\n    } else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n    }\n  }, [products, data, dispatch, id]);\n\n  return (\n    <>\n      {currentProduct ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">\n            ← Back to Products\n          </Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>\n            {currentProduct.description}\n          </p>\n\n          <p>\n            <strong>Price:</strong>\n            ${currentProduct.price}\n            {\" \"}\n            <button>\n              Add to Cart\n            </button>\n            <button>\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {\n        loading ? <img src={spinner} alt=\"loading\" /> : null\n      }\n    </>\n  );\n};\n\nexport default Detail;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n\n\n// import decode from 'jwt-decode';\n\n// class AuthService {\n//   getProfile() {\n//     return decode(this.getToken());\n//   }\n\n//   loggedIn() {\n//     // Checks if there is a saved token and it's still valid\n//     const token = this.getToken();\n//     return !!token && !this.isTokenExpired(token);\n//   }\n\n//   isTokenExpired(token) {\n//     try {\n//       const decoded = decode(token);\n//       if (decoded.exp < Date.now() / 1000) {\n//         return true;\n//       } else return false;\n//     } catch (err) {\n//       return false;\n//     }\n//   }\n\n//   getToken() {\n//     // Retrieves the user token from localStorage\n//     return localStorage.getItem('id_token');\n//   }\n\n//   login(idToken) {\n//     // Saves user token to localStorage\n//     localStorage.setItem('id_token', idToken);\n\n//     window.location.assign('/');\n//   }\n\n//   logout() {\n//     // Clear user token and profile data from localStorage\n//     localStorage.removeItem('id_token');\n//     // this will reload the page and reset the state of the application\n//     window.location.assign('/');\n//   }\n// }\n\n// export default new AuthService();\n","import React, { useState } from \"react\";\nimport { useMutation } from '@apollo/react-hooks';\nimport { Link } from \"react-router-dom\";\nimport { LOGIN } from \"../utils/mutations\"\nimport Auth from \"../utils/auth\";\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' })\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({ variables: { email: formState.email, password: formState.password } })\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e)\n    }\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">\n        ← Go to Signup\n      </Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {\n          error ? <div>\n            <p className=\"error-text\" >The provided credentials are incorrect</p>\n          </div> : null\n        }\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\n\nexport default Login;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useMutation } from '@apollo/react-hooks';\nimport Auth from \"../utils/auth\";\nimport { ADD_USER } from \"../utils/mutations\";\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email, password: formState.password,\n        firstName: formState.firstName, lastName: formState.lastName\n      }\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">\n        ← Go to Login\n      </Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nimport Home from './pages/Home';\nimport Detail from './pages/Detail';\nimport NoMatch from './pages/NoMatch';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Nav from './components/Nav';\nimport { StoreProvider } from \"./utils/GlobalState\";\nimport OrderHistory from './pages/OrderHistory';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <StoreProvider>\n            <Nav />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\n              <Route exact path=\"/products/:id\" component={Detail} />\n              <Route component={NoMatch} />\n            </Switch>\n          </StoreProvider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";"],"sourceRoot":""}